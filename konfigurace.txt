jdbc:h2:./vykrajovatka
sa
-nic-

Vykrajovatka:

DB:

obrázek
název
štítky
datum 
popis

UI:

seznam podle štítkù
možnost pøidat
možnost smazat
možnost upravit

node-debug --debug-port=5858 --web-port=1337 --save-live-edit server.js


------------------------------------

/*
 var List = React.createClass({
  render: function() {
    return (
		var items = this.props.data.map(function(item) {
			return (
		        <tr>
					<td>{item.jmeno}</td>
					<td>{item.datum}</td>
					<td>{item.popis}</td>
					<td>{item.tagy}</td>				
				<tr>
			);
		});
		<div><table>
			<tr>
				<th>Název</th>
				<th>Datum</th>
				<th>Popis</th>
				<th>Štítky</th>
			</tr>
			{items}
		</table></div>
    );
  }
});
*/

/*
 					if (typeof item._attachments !== 'undefined') {
						<td><img src='{item.foto}'/></td>;
					}
 */


/*
var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});
*/

//<CommentBox url="/api/comments" pollInterval={2000} />,

var List = React.createClass({
	  render: function() {
		  var items = this.props.data.map(function(item) {
			  return (
			        <tr>
						<td>{item.jmeno}</td>
						<td>{item.datum}</td>
						<td>{item.popis}</td>
						<td>{item.tagy}</td>				
					<tr>
				);
		  });
		  return (
				  <div><table>
				  	<tr>
						<th>Název</th>
						<th>Datum</th>
						<th>Popis</th>
						<th>Štítky</th>
					</tr>
					{items}
				</table></div>
		  );
	  }
});